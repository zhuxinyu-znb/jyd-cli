#!/usr/bin/env node
const figlet = require('figlet');/* *********************** 生成asc码的包*/ 
const Printer = require('@darkobits/lolcatjs');/* ********* 做渐变色的包*/
const program = require('commander');/* ******************* 和用户交互的包*/
const inquirer = require('inquirer');/* ******************* 和用户交互的包*/
const chalk = require('chalk');/* ************************* 说话变颜色的包*/
const json2ts = require('json2ts');/* ********************* 把json转换成ts的包*/
const ora = require('ora');/* ***************************** 添加loading等待的包*/
// 获取用户全路径的包
// const userHome = require('user-home');
// 也可以直接用shelljs来取
const shell = require('shelljs');/* *********************** 能调用shell的包*/
// console.log(shell.pwd().stdout)
const download = require('download-git-repo');/* ********** 从git上拉项目的包*/
// git上模板的地址
const templateUrl = "direct:https://github.com/zhuxinyu-znb/zhuxinyu-znb.github.io.git";
// 版本号
const txt = figlet.textSync('JYD-CLI v1.0.4');
// 添加版本号
program.version(Printer.default.fromString(txt), "-v,--version");
// 根据用户输入不同的初始化指令做不同的骚操作
const bindHandler = {
    init() {
        // 与用户交互的问题
        inquirer.prompt([
            {
                type: 'text',
                name: 'dirname',
                message: '请输入文件夹的名称'
            },
            {
                type: 'list',
                name: 'jskind',
                message: '请问使用哪种编程语言',
                choices: ['✔ es6', '✔ typescript']
            },
            {
                type: 'list',
                name: 'ismap',
                message: '需要使用高德地图吗',
                choices: ['✔ Yes', '✖ No']
            }
        ])
            .then(answers => {
                // 1.git准备好一个能容纳百川的项目
                // 2.git 下载那个包
                // 3.shelljs 根据用户选择对你下载的包进行修改删除
                // 4.在用户的桌面创建最终的项目
                // 5.引导开发使用
                const _dirname = answers.dirname;
                if (_dirname) {
                    const spinner = ora("正在下载模板，请稍后。。。");
                    spinner.start();
                    const _pwd = shell.pwd().stdout;
                    const _projectPath = `${_pwd}/${_dirname}`;
                    shell.cd(_pwd);
                    shell.rm('-rf', _projectPath);
                    shell.mkdir(_dirname);
                    download(templateUrl, _projectPath, { clone: true }, err => {
                        spinner.stop();
                        if (err) {
                            console.log(chalk.red('mycli启动异常'), err);
                        } else {
                            // 在package.json 中查找到要替换的名字，将用户输入的文件夹名替换上去
                            shell.sed("-i", "要替换的名字",_dirname,_projectPath+"/package.json");
                        }
                    })
                }
            });
    },
    json2ts(url) {
        console.log('接口地址', url);
        // 假装接到了数据
        const jsonContent = {
            code: 1,
            info: {
                message: '请求成功',
                data: [
                    {
                        num: 1,
                        title: "第一条数据"
                    }
                ]
            }
        };
        let result = json2ts.convert(JSON.stringify(jsonContent));
        console.log(result);
        const spinner = ora("正在帮爷生成代码中，请稍后。。。");
        spinner.start();
    }
}

// 跟用户交互
program.usage("<cmd> [env]")
    .arguments('<cmd> [env]')
    .action(function (cmd, otherParams) {
        // 输出用户输入的内容 cmd 是用户输入的第一个参数 otherParams 是第二个参数
        const handler = bindHandler[cmd];
        if (handler) {
            handler(otherParams);
        } else {
            console.log(chalk.yellow("非常遗憾") + "【" + chalk.red(cmd) + "】" + chalk.yellow("暂未实现"))
        }
    })
program.parse(process.argv);
