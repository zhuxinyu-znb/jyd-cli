#!/usr/bin/env node
const fs = require('fs');
const figlet = require('figlet');/* *********************** 生成asc码的包*/
const Printer = require('@darkobits/lolcatjs');/* ********* 做渐变色的包*/
const program = require('commander');/* ******************* 和用户交互的包*/
const inquirer = require('inquirer');/* ******************* 和用户交互的包*/
const chalk = require('chalk');/* ************************* 说话变颜色的包*/
const json2ts = require('json2ts');/* ********************* 把json转换成ts的包*/
const ora = require('ora');/* ***************************** 添加loading等待的包*/
const execSync = require('child_process').execSync;
// 获取用户全路径的包
// const userHome = require('user-home');
// 也可以直接用shelljs来取
const shell = require('shelljs');/* *********************** 能调用shell的包*/
// console.log(shell.pwd().stdout)
const download = require('download-git-repo');/* ********** 从git上拉项目的包*/
// git上模板的地址
const templateUrl = "direct:https://github.com/zhuxinyu-znb/react-ts-template.git";


// 版本号
const txt = figlet.textSync('JYD-CLI v1.0.8');
// 添加版本号
program.version(Printer.default.fromString(txt), "-v,--version");
// 根据用户输入不同的初始化指令做不同的骚操作
const bindHandler = {
    init() {
        console.log(Printer.default.fromString(txt));
        // 与用户交互的问题
        inquirer.prompt([
            {
                type: 'text',
                name: 'dirname',
                message: '请输入项目名称'
            },
            /* {
                type: 'list',
                name: 'jskind',
                message: '请问使用哪种编程语言',
                choices: ['✔ es6(还没搭好╮(╯▽╰)╭)', '✔ typescript']
            }, */
            {
                type: 'list',
                name: 'tOb',
                message: '什么类型的系统',
                choices: ['✔ 后台管理系统(还没搭好╮(╯▽╰)╭)', '✔ 可视化平台']
            },
            {
                type: 'list',
                name: 'isBFF',
                message: '是否采用BFF架构',
                choices: ['✔ Yes', '✖ No']
            },
            {
                type: 'list',
                name: 'ismap',
                message: '需要使用高德地图吗',
                choices: ['✔ Yes', '✖ No']
            }
        ])
            .then(answers => {
                // 1.git准备好一个能容纳百川的项目
                // 2.git 下载那个包
                // 3.shelljs 根据用户选择对你下载的包进行修改删除
                // 4.在用户的桌面创建最终的项目
                // 5.引导开发使用
                const _dirname = answers.dirname;
                // const tsReg = /typescript$/g;
                const typeReg = /可视化平台$/g;
                const bffReg = /Yes$/g;
                const mapReg = /Yes$/g;
                // const _kind = tsReg.test(answers.jskind) ? 'ts' : 'js';
                const _type = typeReg.test(answers.tOb) ? 'visual' : 'mansys';
                const _bff = bffReg.test(answers.isBFF);
                const _map = mapReg.test(answers.ismap);
                const _pwd = shell.pwd().stdout;
                const _projectPath = `${_pwd}/${_dirname}`;
                checkAppName(_dirname);
                if (!isSafeToCreateProjectIn(_pwd, _dirname)) {
                    process.exit(1);
                }
                if (_dirname) {
                    const spinner = ora("正在下载模板，请稍后。。。");
                    spinner.start();
                    shell.cd(_pwd);
                    shell.rm('-rf', _projectPath);
                    shell.mkdir(_dirname);
                    download(`${templateUrl}#ts_${_type}_ssr`, _projectPath, { clone: true }, err => {
                        spinner.stop();
                        if (err) {
                            console.log(chalk.red('mycli启动异常'), err);
                        } else {
                            // 根据选择是否为BFF架构删除server
                            if (!_bff) {
                                shell.rm('-rf', _projectPath + "/src/server");
                                shell.rm('-rf', _projectPath + "/package.json");
                                shell.mv(_projectPath + "/package1.json", _projectPath + "/package.json");
                            } else {
                                shell.rm('-rf', _projectPath + "/package1.json");
                            }
                            // 根据选择是否添加高德地图
                            if (_map) {
                                shell.sed("-i", `'AMap': 'AMap',`, '', _projectPath + "/webpack.config.js");
                                shell.sed("-i", '<!-- ', '', _projectPath + "/src/client/index-prod.html");
                                shell.sed("-i", ' -->', '', _projectPath + "/src/client/index-prod.html");
                                shell.sed("-i", '<!-- ', '', _projectPath + "/src/client/index-dev.html");
                                shell.sed("-i", ' -->', '', _projectPath + "/src/client/index-dev.html");
                            }
                            // 在package.json 中查找到要替换的名字，将用户输入的文件夹名替换上去
                            shell.sed("-i", "react-ts-template", _dirname, _projectPath + "/package.json");
                        }
                    })
                }
            });
    },
    json2ts(url) {
        console.log('接口地址', url);
        // 假装接到了数据
        const jsonContent = {
            code: 1,
            info: {
                message: '请求成功',
                data: [
                    {
                        num: 1,
                        title: "第一条数据"
                    }
                ]
            }
        };
        let result = json2ts.convert(JSON.stringify(jsonContent));
        console.log(result);
        const spinner = ora("正在帮爷生成代码中，请稍后。。。");
        spinner.start();
    }
}

// 跟用户交互
program.usage("<cmd> [env]")
    .arguments('<cmd> [env]')
    .action(function (cmd, otherParams) {
        // 输出用户输入的内容 cmd 是用户输入的第一个参数 otherParams 是第二个参数
        const handler = bindHandler[cmd];
        if (handler) {
            handler(otherParams);
        } else {
            console.log(chalk.yellow("非常遗憾") + "【" + chalk.red(cmd) + "】" + chalk.yellow("暂未实现"))
        }
    })
program.parse(process.argv);

// 进行项目名检查
function checkAppName(appName) {
    const dependencies = ['react', 'react-dom', 'react-scripts', 'redux', 'echarts', 'react-redux', 'antd', 'babel-plugin-import', 'react-app-rewired'].sort();
    if (dependencies.indexOf(appName) >= 0) {
        console.error(
            chalk.red(
                `不能创建名字叫 ${chalk.green(
                    appName
                )} 的项目\n` +
                `因为这个名字和一些依赖包的名字相同!!\n\n`
            ) +
            chalk.cyan(dependencies.map(depName => `  ${depName}`).join('\n')) +
            chalk.red('\n\n赶紧换个名！！.')
        );
        process.exit(1);
    }
}

// 检查要创建的项目文件夹是否安全，是不是已经存在这个文件夹
function isSafeToCreateProjectIn(root, name) {
    const validFiles = [
        '.DS_Store',
        'Thumbs.db',
        '.git',
        '.gitignore',
        '.idea',
        'README.md',
        'LICENSE',
        'web.iml',
        '.hg',
        '.hgignore',
        '.hgcheck',
        '.npmignore',
        'mkdocs.yml',
        'docs',
        '.travis.yml',
        '.gitlab-ci.yml',
        '.gitattributes',
    ];
    console.log();
    const conflicts = fs
        .readdirSync(root)
        .filter(file => !validFiles.includes(file));
    if (!conflicts.includes(name)) {
        return true;
    }

    console.log(
        `当前文件夹可能包含冲突文件:`
    );
    console.log();
    console.log(`${chalk.red(name)} `);
    console.log();
    console.log(
        '要么换个文件名，要么把上面说的文件删了！'
    );
    return false;
}

// 判断有没有yarn
function hasYarn() {
    const version = shell.exec('node --version', {silent:true}).stdout;
    return !!version;
}

// 安装依赖
const install = function () {
    hasYarn()
}